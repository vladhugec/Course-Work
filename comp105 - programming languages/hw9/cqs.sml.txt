1. Always

2. 
    a) Yes
    b) Yes
    c) No
    d) 
      signature ENV = sig
        type name = string
        type 'a env
        
        exception NotFound of name
        
        val emptyEnv : 'a env
        val lookup : name * 'a env -> 'a val bindVar : name * 'a *'a env->'a env
      end
      
    e) The signature is useless because without a type the user doesn't know how
       to create a name with signature ENV'
       
3. 
   a)
     structure TEST_SET = sig
        type test
        val name : string
        val compare : test * test -> order
        val convertToString : test -> string
     end
    
     functor TestSetFun(
                    structure TestSet : TEST_SET
                      )
         :> TEST_SET = struct ... end  (* ignore this part *) 
         
   b) 
     type uid = string
     type check_type_test =
       uid * int * exp * ty  (* int is sequence number *)
       
     structure CheckTypeSet :> TEST_SET where type test = check_type_test
       =        TestSetFun( type test = check_type_test
                    fun compare (uid1, uid2) = 
                              case String.compare (uid1, uid2) of 
                                 EQUAL => Int.compare (seqno1, seqno2)
                               | diff  => diff
                    fun convertToString (test) = 
                           concat [”(check-type ”, expString e, ” ”,
                           tyString tau, ”)”]                   
                   )
                   
4.
    a) In part B of the previous question the "type where" is a declaration
       (a promise) to the interpreter that the abstract type will be initialized
       as declared.
    b) That type wouldn't be defined in the test set and so you wouldn't be able
       to use it at all
       
5.
    a)
      val invariant : int list -> bool
      fun invariant (x::y::xys) =
            if (x > y) 
              then if (List.null (xys))
                   then true
                   else invariant (xys)
              else false
              
    b) 
        fun invariant (ZERO) = true
          | invariant (TIMES10PLUS (m, d)) = 
                          if (not (m = 0 andalso d = 0)
                              then if (d < 10 andalso d >= 0)
                                      then true
                                      else false
                              else false
                              
    c)
        datatype 'a indicated
         = INDICATED   of 'a
         | UNINDICATED of 'a
         
        val absfun : 'a ilist -> 'a indicated list
        fun absfun (x::xs) = INCOMPLETE
        
6. 
    a)
        02 divided by 7  ==  0 remainder 2
        29 divided by 7  ==  4 remainder 1
        11 divided by 7  ==  1 remainder 4
        48 divided by 7  ==  6 remainder 6
        
        416 remainder 6 = 416 + 6/7 = 416.86
        
7.
    a) 
        q0 = 6          r0 = 1
        q1 = 3          r1 = 0
        q2 = 1          r2 = 1
        q3 = 0          r3 = 1
        
        dec 13 -> bin 1101
        
    b)  q0 = 3          r0 = 1
        q0 = 0          r0 = 3
        
        dec 25 -> oct 31
       
        

                
            