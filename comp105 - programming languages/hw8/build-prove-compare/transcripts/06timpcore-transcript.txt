-> (define int add1 ([x : int]) (+ x 1))
add1 : (int -> int)
-> (add1 4)
5 : int
-> (define int double ([x : int]) (+ x x))
double : (int -> int)
-> (double 4)
8 : int
-> (check-function-type add1 (int -> int))
-> (check-function-type double (int -> int))
-> (check-function-type positive? (int -> bool))
-> (define bool positive? ([n : int]) (> n 0))
-> (if 1 77 88)
type error: Condition in if expression has type int, which should be bool
-> (if (positive? 1) 77 99)
77 : int
-> (val truth-vector (make-array 3 (= 0 1)))
[0 0 0] : (array bool)
-> (array-put truth-vector 1 (= 0 0))
1 : bool
-> truth-vector
[0 1 0] : (array bool)
-> (define (array (array int)) matrix-using-a-and-i 
      ; return square matrix of side length; a and i are for local use only
      ([length : int] [a : (array (array int))] [i : int])
     (begin
       (set a (make-array length (make-array 0 0)))
       (set i 0)
       (while (< i length)
          (begin
            (array-put a i (make-array length 0))
            (set i (+ i 1))))
       a))
-> (define (array (array int)) matrix ([length : int])
     (matrix-using-a-and-i length (make-array 0 (make-array 0 0)) 0))
-> (val a (matrix 3))
[[0 0 0] [0 0 0] [0 0 0]] : (array (array int))
-> (val i 0)
-> (val j 0)
-> (while (< i 3) (begin
      (set j 0)
      (while (< j 3) (begin
         (array-put (array-at a i) j (+ i j))
         (set j (+ j 1))))
      (set i (+ i 1))))
-> a
[[0 1 2] [1 2 3] [2 3 4]] : (array (array int))
-> (val a.1 (array-at a 1))
[1 2 3] : (array int)
-> (val a.1.1 (array-at a.1 1))
2 : int
